ELFDEPS(1)       General Commands Manual (darkstar-tools-14.2)      ELFDEPS(1)

NAME
     elfdeps â€“ querys ELF files for NEEDED libraries.

SYNOPSIS
     elfdeps options < [-r] file ... | [-c] -p [pkg ...]>

DESCRIPTION
     elfdeps scans the dynamic section of an ELF file for DT_NEEDED libraries,
     and does a query for the required libraries in the /lib, /usr/lib,
     /usr/local/lib and /lib64, /usr/lib64, /usr/local/lib64 directories for
     32 and 64 bit ELF files, respectively. Any DT_RPATH found in the dynamic
     section is also scanned for the libraries.  Output is formatted as
     (<pkg>:)<file>:<lib>:<path>(:<pkg>), where file is the path given as
     argument, lib is the needed library and path is either the path to
     required library or missing.

ARGUMENTS
     -r Recursively traverse any directories given on command line.

     -m Only print items that depend on libraries that cannot be located.

     -w regex Only print items depending on a library or package matching
     regex.  (Note: Will only match against the library name, not path.)

     -p [pkg ...] Search files owned by the given package(s). If no packages
     are given, all packages are scanned. Basically:

           $ cat /var/log/packages/pkg | xargs elfdeps

     -c Do not list packages that depend on themself.

     -o | -O Print or omit, respectively, the package owning a queried file.

     -f | -F Print or omit, respectively, the path of a queried file.

     -n | -N Print or omit, respectively, the name of a needed library.

     -l | -L Print or omit, respectively, the path of a needed library.

     -d | -D Print or omit, respectively, the package containing a needed
     library.

     -E Print nothing but the DT_RPATH and DT_NEEDED sections of queried
     file(s).  (Can otherwise be used to reset the default print flags.)

     -z Alias for -pcEod.  I.e. print only package dependancies,
     <pkg-a>:<pkg-b>, where pkg-a != pkg-b and pkg-a contains a file dependant
     on a file contained in pkg-b.



CAVEATS
     elfdeps does not actually resolve library dependencies, it ignores
     /etc/ld.so.cache, /etc/ld.so.conf and $LD_LIBRARY_PATH. It is designed to
     sacrifice accuracy for speed. For proper dependency resolution use
     ldd(1).  The program scans each directory only once, multiple files
     sharing DT_RPATH, or DT_RPATH containing e.g. /usr/lib64, will not incur
     rescanning of the given directory. Files in a scanned directory is
     regarded as a potential library iff its name contains the string ".so",
     they are never stat(2)'ed, so they might be dangling symlinks, sockets,
     directories, or any non-shared-library file possible. The fact that
     elfdeps claims that a library is either missing or found at some
     particular path does not answer wheter or not a library dependency is
     actually satisfied, but hopefully it should give an accrurate picture in
     most cases.

BUGS
     DT_RPATH is (allegedly) deprecated, DT_RUNPATH should be queried as well,
     but isn't.


SEE ALSE
     ldd(1), readelf(1), objdump(1), elf(5), ld.so(8),

                             19th of October 2016
